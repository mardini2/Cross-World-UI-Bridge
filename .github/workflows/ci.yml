name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Install dev tooling
        run: python -m pip install -r requirements-dev.txt

      - name: Lint (ruff)
        run: ruff check app tests

      - name: Format check (black)
        run: black --check app tests

      - name: Type check (mypy)
        run: mypy app

      - name: Run tests (pytest)
        run: pytest -q

  build-windows-exe:
    needs: test
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Upgrade pip and install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Clean PyInstaller outputs
        shell: pwsh
        run: |
          if (Test-Path .\dist) { Remove-Item -Recurse -Force .\dist }
          if (Test-Path .\build) { Remove-Item -Recurse -Force .\build }
          if (Test-Path .\UIBridge.spec) { Remove-Item -Force .\UIBridge.spec }
          if (Test-Path .\ui.spec) { Remove-Item -Force .\ui.spec }

      - name: Build agent EXE with PyInstaller
        run: >
          pyinstaller --noconfirm --clean --noconsole
          --name UIBridge
          --version-file installer/version_info.txt
          --hidden-import aiosqlite
          --hidden-import sqlalchemy.dialects.sqlite.aiosqlite
          --collect-submodules sqlalchemy.dialects
          app/main.py

      - name: Build CLI EXE (ui)
        run: >
          pyinstaller --noconfirm --clean
          --name ui
          --version-file installer/version_info.txt
          --hidden-import aiosqlite
          --hidden-import sqlalchemy.dialects.sqlite.aiosqlite
          --collect-submodules sqlalchemy.dialects
          app/cli/entry.py

      - name: Prepare Windows package folder (CI artifact)
        shell: pwsh
        run: |
          $pkg = "UIBridge-Windows"
          if (Test-Path $pkg) { Remove-Item -Recurse -Force $pkg }
          New-Item -ItemType Directory -Force $pkg | Out-Null

          Copy-Item -Recurse -Force "dist\UIBridge" "$pkg\UIBridge"
          Copy-Item -Recurse -Force "dist\ui" "$pkg\ui"

          Set-Content -Encoding ascii "$pkg\Open UIBridge CLI.cmd" @(
            '@echo off',
            'cd /d "%~dp0ui"',
            'start "" cmd /k ui.exe --help'
          )
          Set-Content -Encoding ascii "$pkg\Start UIBridge Agent.cmd" @(
            '@echo off',
            'cd /d "%~dp0UIBridge"',
            'start "" UIBridge.exe'
          )

          Copy-Item -Force "scripts\install_agent_startup.ps1" "$pkg\install_agent_startup.ps1"
          Copy-Item -Force "scripts\uninstall_agent_startup.ps1" "$pkg\uninstall_agent_startup.ps1"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: UIBridge-Windows
          path: UIBridge-Windows
